// base.js
var oauth = require("oauth")
var async = require("async")
var error = require("./error.js")

oauth = new oauth.OAuth2(
            process.env.cId, process.env.cKey,
            'https://twinoid.com/', 'oauth/auth', 'oauth/token', null
        )
oauth_req = ""
oauth_scope = ""

module.exports = function(data, scope){
    oauth_req = data
    oauth_scope = scope
    return this
}

var parse = function(req, res, next){
    return function(err, access_token, refresh_token, result){
        // error management
        if(err) return next(new Error(err))
        if(result.error) return next(new error.OAuth(result.error))
        // success
        result.expire = new Date(Date.now()+result.expires_in*1000)
        try {
            req.session.access  = result
            req.session.token   = access_token
            req.session.refresh = refresh_token
        } catch(err){
            next(err)
        }
        oauth.get(oauth_req, access_token, function(err, result, response){
            if(err) return next(err)
            req.json = JSON.parse(result)
            next()
        })
    }
}

go = function go(req, res, next){
    req.session.from = referer = req.headers['referer'] 
    if(req.session.access && new Date(Date.now()) < req.session.access.expire){
        return res.redirect(referer)
    }
    params = {state:"foobar", access_type:"offline",response_type:"code"}
    params.redirect_uri = process.env.cHost+'/back'
    if(oauth_scope) params.scope = oauth_scope
    // send the user fetch the authorisation
    res.redirect(oauth.getAuthorizeUrl(params))
}
back = function back(req, res, next){
    oauth.getOAuthAccessToken(req.query.code, {
            grant_type: 'authorization_code',
            redirect_uri: process.env.cHost+'/back'
        }, parse(req, res, next))
}

refresh = function refresh(req, res, next){
    oauth.getOAuthAccessToken(req.session.refresh, {
            grant_type:'refresh_token' 
        }, parse(req, res, next))
}

